version: '3.8'

services:
  # PostgreSQL Database (Optional - use if not using managed DB)
  postgres:
    image: postgres:15-alpine
    container_name: bp_postgres_prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-bp_prod_db}
      POSTGRES_USER: ${POSTGRES_USER:-bp_prod_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-bp_prod_secure_password}
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - bp_network
    # Only start if DATABASE_URL points to container
    profiles:
      - postgres

  # Redis Cache & Celery Broker
  redis:
    image: redis:7-alpine
    container_name: bp_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Django Backend
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: bp_backend
    command: gunicorn --bind 0.0.0.0:8000 config.wsgi:application --workers=4 --timeout=120 --max-requests=1000
    volumes:
      - ./backend:/app
      - static_volume:/app/static
      - media_volume:/app/media
    ports:
      - "8000:8000"
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}  # External managed DB
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
      - DJANGO_ENV=production
      - DOMAIN=${DOMAIN}
      - DJANGO_ENV=production
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Worker
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bp_celery
    command: celery -A config worker -l info --concurrency=2 --max-tasks-per-child=1000
    volumes:
      - ./backend:/app
      - media_volume:/app/media
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}  # External managed DB
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    depends_on:
      - redis
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "config", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Celery Beat
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bp_celery_beat
    command: celery -A config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - ./backend:/app
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}  # External managed DB
      - REDIS_URL=redis://redis:6379/0
      - ALLOWED_HOSTS=${ALLOWED_HOSTS}
    depends_on:
      - redis
      - backend
    restart: unless-stopped

  # Nginx Reverse Proxy with SSL
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: bp_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/static
      - media_volume:/media
      - ./nginx/ssl:/etc/letsencrypt  # Let's Encrypt sertifikalarƒ±
      - ./nginx/ssl/www:/var/www/certbot  # ACME challenge
    environment:
      - DOMAIN=${DOMAIN}
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SSL Certificate Auto-Renewal Container
  certbot:
    image: certbot/certbot:latest
    container_name: bp_certbot
    volumes:
      - ./nginx/ssl:/etc/letsencrypt
      - ./nginx/ssl/www:/var/www/certbot
    environment:
      - SSL_EMAIL=${SSL_EMAIL}
      - DOMAIN=${DOMAIN}
    command: >
      sh -c "
      # ƒ∞lk sertifika kontrol√º (production certificate)
      if [ ! -d '/etc/letsencrypt/live/${DOMAIN}' ]; then
        echo 'üîí Production SSL sertifikasƒ± alƒ±nƒ±yor...';
        certbot certonly --webroot --webroot-path=/var/www/certbot --email ${SSL_EMAIL} --agree-tos --no-eff-email -d ${DOMAIN} --non-interactive;
        if [ $? -eq 0 ]; then
          echo '‚úÖ Production SSL sertifikasƒ± ba≈üarƒ±yla alƒ±ndƒ±!';
        else
          echo '‚ùå Production SSL sertifikasƒ± alƒ±namadƒ±!';
          exit 1;
        fi;
      fi;
      
      # S√ºrekli yenileme d√∂ng√ºs√º  
      while :; do
        echo 'üîç SSL sertifikalarƒ± kontrol ediliyor... ($(date))';
        certbot renew --webroot --webroot-path=/var/www/certbot --quiet --no-self-upgrade;
        
        if [ $? -eq 0 ]; then
          echo '‚úÖ SSL kontrol/yenileme ba≈üarƒ±lƒ±, Nginx yeniden y√ºkleniyor...';
          docker exec bp_nginx nginx -s reload 2>/dev/null || echo '‚ö†Ô∏è Nginx reload hatasƒ±';
        else
          echo '‚ùå SSL yenileme hatasƒ±!';
        fi;
        
        echo '‚è∞ SSL kontrol tamamlandƒ±. 12 saat bekleniyor...';
        sleep 12h;
      done"
    restart: unless-stopped
    depends_on:
      - nginx
    networks:
      - bp_network
    healthcheck:
      test: ["CMD", "certbot", "certificates"]
      interval: 12h
      timeout: 30s
      retries: 3

  # Flower for Celery Monitoring (Production)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bp_flower_prod
    command: celery -A config flower --port=5555 --basic_auth=admin:${FLOWER_PASSWORD:-secure123}
    ports:
      - "5555:5555"
    environment:
      - DEBUG=False
      - SECRET_KEY=${SECRET_KEY}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=redis://redis:6379/0
      - DJANGO_ENV=production
    depends_on:
      - redis
      - backend
    networks:
      - bp_network
    restart: unless-stopped

volumes:
  postgres_prod_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local

networks:
  default:
    name: bp_network
    driver: bridge