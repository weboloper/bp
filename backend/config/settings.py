"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Environment variables
env = environ.Env(
    DEBUG=(bool, True),
    SECRET_KEY=(str, 'django-insecure-change-this-in-production'),
    DATABASE_URL=(str, ''),
    USE_ASYNC_EMAIL=(bool, False),
)

# Environment setup - Docker vs cPanel with multi-env support
# print(f"BASE_DIR: {BASE_DIR}")
# print(f"Raw env DEBUG: {os.environ.get('DEBUG', 'NOT_SET')}")

# İlk olarak environment variables'lara bak (Docker)
if 'DEBUG' in os.environ:
    # print("Using environment variables (Docker mode)")
    pass
else:
    # .env dosyasını dene (cPanel mode)
    # Ortam tipini belirle
    env_type = os.environ.get('DJANGO_ENV', 'development')  # development, staging, production
    
    # Ortama göre doğru .env dosyasını seç
    if env_type == 'staging':
        env_file = '.env.staging'
    elif env_type == 'production':
        env_file = '.env.prod'
    else:
        env_file = '.env'  # development
    
    # .env dosyasını ara (parent directory'den başla)
    parent_env_path = BASE_DIR.parent / env_file
    backend_env_path = BASE_DIR / env_file
    
    # print(f"Looking for env file: {env_file}")
    # print(f"Parent .env path: {parent_env_path}")
    # print(f"Backend .env path: {backend_env_path}")
    
    if parent_env_path.exists():
        environ.Env.read_env(parent_env_path)
        # print(f"{env_file} loaded from parent directory (cPanel mode)")
    elif backend_env_path.exists():
        environ.Env.read_env(backend_env_path)
        # print(f"{env_file} loaded from backend directory (cPanel mode)")
    else:
        # Fallback to .env if specific env file not found
        fallback_parent = BASE_DIR.parent / '.env'
        fallback_backend = BASE_DIR / '.env'
        
        if fallback_parent.exists():
            environ.Env.read_env(fallback_parent)
            # print("Fallback: .env loaded from parent directory")
        elif fallback_backend.exists():
            environ.Env.read_env(fallback_backend)
            # print("Fallback: .env loaded from backend directory")
        else:
            pass
            # print("No .env file found - using defaults")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')
# print(f"Final DEBUG value: {DEBUG}")
# print(f"DEBUG type: {type(DEBUG)}")

# ALLOWED_HOSTS configuration
if DEBUG:
    ALLOWED_HOSTS = ['*']
else:
    # Production/Staging - sadece belirli host'lara izin ver
    allowed_hosts_str = env('ALLOWED_HOSTS', default='localhost,127.0.0.1')
    ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_str.split(',')]
    
    # Domain varsa ekle
    domain = env('DOMAIN', default='')
    if domain and domain not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append(domain)

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'django_celery_beat',
    'django_celery_results',
    
    # Local apps
    'core',
    'accounts',
    'pages',
    
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
]

# Static Files Handler Strategy
STATIC_FILES_HANDLER = env('STATIC_FILES_HANDLER', default='nginx')

# WhiteNoise middleware'i sadece whitenoise handler için ekle
if STATIC_FILES_HANDLER == 'whitenoise':
    MIDDLEWARE.append('whitenoise.middleware.WhiteNoiseMiddleware')

MIDDLEWARE.extend([
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
])

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if env('DATABASE_URL'):
    # Use dj-database-url for flexible database configuration
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(env('DATABASE_URL'))
    }
else:
    # Fallback to SQLite for development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'tr-tr'
TIME_ZONE = 'Europe/Istanbul'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'

# Static files directories (your app's static files)
STATICFILES_DIRS = []
if (BASE_DIR / 'static').exists():
    STATICFILES_DIRS.append(BASE_DIR / 'static')

# Static root - where collectstatic puts files
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Static Files Strategy Configuration
STATIC_FILES_HANDLER = env('STATIC_FILES_HANDLER', default='caddy')

if STATIC_FILES_HANDLER == 'whitenoise':
    # WhiteNoise Configuration (cPanel için)
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
    
    # WhiteNoise ayarları
    WHITENOISE_USE_FINDERS = True
    WHITENOISE_AUTOREFRESH = DEBUG
    WHITENOISE_MAX_AGE = 86400  # 1 day cache
    
    # Compression settings
    if not DEBUG:
        WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'zip', 'gz', 'tgz', 'bz2', 'tbz', 'xz', 'br']
        WHITENOISE_MIMETYPES = {
            '.js': 'application/javascript',
            '.css': 'text/css',
        }

elif STATIC_FILES_HANDLER == 's3':
    # AWS S3 Configuration
    STATICFILES_STORAGE = 'storages.backends.s3boto3.S3StaticStorage'
    DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'  # Media files
    
    AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')
    AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')
    AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
    AWS_S3_REGION_NAME = env('AWS_S3_REGION_NAME', default='us-east-1')
    
    # CloudFront domain (opsiyonel)
    AWS_S3_CUSTOM_DOMAIN = env('AWS_S3_CUSTOM_DOMAIN', default=None)
    if AWS_S3_CUSTOM_DOMAIN:
        AWS_S3_URL_PROTOCOL = 'https:'
        STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'
        MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/media/'
    else:
        STATIC_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/static/'
        MEDIA_URL = f'https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/media/'
    
    AWS_DEFAULT_ACL = env('AWS_DEFAULT_ACL', default='public-read')
    AWS_S3_OBJECT_PARAMETERS = {
        'CacheControl': env('AWS_S3_OBJECT_PARAMETERS_CacheControl', default='max-age=86400'),
    }
    AWS_S3_FILE_OVERWRITE = False
    AWS_QUERYSTRING_AUTH = False

elif STATIC_FILES_HANDLER == 'caddy':
    # Caddy Web Server Configuration
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'
    # Caddy static dosyaları serve ediyor, Django karışmasın

else:
    # Default: Nginx/Apache serve eder (VPS için)
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# Media files (uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'accounts.User'

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# Django Simple JWT Settings
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',
    
    'JTI_CLAIM': 'jti',
    
    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

# CORS Settings
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only in development
if not DEBUG:
    CORS_ALLOWED_ORIGINS = [
        f"https://{env('DOMAIN', default='yourdomain.com')}",
        f"https://www.{env('DOMAIN', default='yourdomain.com')}",
    ]

# Celery Configuration (only works in Docker, not cPanel)
if not os.path.exists('/home'):  # Not cPanel
    CELERY_BROKER_URL = env('REDIS_URL', default='redis://redis:6379/0')
    CELERY_RESULT_BACKEND = env('REDIS_URL', default='redis://redis:6379/0')
    CELERY_ACCEPT_CONTENT = ['json']
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_TIMEZONE = TIME_ZONE

# Cache Configuration
if not os.path.exists('/home'):  # Docker
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': env('REDIS_URL', default='redis://redis:6379/1'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }
else:  # cPanel - use database cache
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'django_cache_table',
        }
    }

# Security settings for production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 86400
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Only enable if using HTTPS
    # SECURE_SSL_REDIRECT = True
    # SESSION_COOKIE_SECURE = True
    # CSRF_COOKIE_SECURE = True

# Environment-specific settings
CURRENT_ENV = env('DJANGO_ENV', default='development')

# Frontend URL Configuration
FRONTEND_URL = env('FRONTEND_URL', default='http://localhost:3000')

# Sentry Configuration
SENTRY_DSN = env('SENTRY_DSN', default=None)
# if SENTRY_DSN and not DEBUG:
#     import sentry_sdk
#     from sentry_sdk.integrations.django import DjangoIntegration
#     from sentry_sdk.integrations.celery import CeleryIntegration
#     from sentry_sdk.integrations.redis import RedisIntegration
    
#     sentry_sdk.init(
#         dsn=SENTRY_DSN,
#         integrations=[
#             DjangoIntegration(auto_enabling=True),
#             CeleryIntegration(auto_enabling=True),
#             RedisIntegration(),
#         ],
#         traces_sample_rate=0.1,
#         send_default_pii=True,
#         environment=CURRENT_ENV,
#         release=env('APP_VERSION', default='1.0.0'),
#     )

# Email Configuration
USE_ASYNC_EMAIL = env('USE_ASYNC_EMAIL')

# Email backend configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Email Settings (Universal - works with any SMTP provider)
EMAIL_HOST = env('EMAIL_HOST', default='localhost')
EMAIL_PORT = env('EMAIL_PORT', default=587)
EMAIL_USE_TLS = env('EMAIL_USE_TLS', default=True)
EMAIL_HOST_USER = env('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD', default='')
DEFAULT_FROM_EMAIL = env('DEFAULT_FROM_EMAIL', default=EMAIL_HOST_USER)

# Console backend for development
if DEBUG and not EMAIL_HOST_USER:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

if CURRENT_ENV == 'staging':
    # Staging specific settings
    print("Running in STAGING mode")
    pass
elif CURRENT_ENV == 'production':
    # Production specific settings  
    print("Running in PRODUCTION mode")
    pass
else:
    # Development specific settings
    print("Running in DEVELOPMENT mode")
    pass