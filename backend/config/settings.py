"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Environment variables
env = environ.Env(
    DEBUG=(bool, True),
    SECRET_KEY=(str, 'django-insecure-change-this-in-production'),
    DATABASE_URL=(str, ''),
)

# Environment setup - Docker vs cPanel with multi-env support
# print(f"BASE_DIR: {BASE_DIR}")
# print(f"Raw env DEBUG: {os.environ.get('DEBUG', 'NOT_SET')}")

# İlk olarak environment variables'lara bak (Docker)
if 'DEBUG' in os.environ:
    # print("Using environment variables (Docker mode)")
    pass
else:
    # .env dosyasını dene (cPanel mode)
    # Ortam tipini belirle
    env_type = os.environ.get('DJANGO_ENV', 'development')  # development, staging, production
    
    # Ortama göre doğru .env dosyasını seç
    if env_type == 'staging':
        env_file = '.env.staging'
    elif env_type == 'production':
        env_file = '.env.prod'
    else:
        env_file = '.env'  # development
    
    # .env dosyasını ara (parent directory'den başla)
    parent_env_path = BASE_DIR.parent / env_file
    backend_env_path = BASE_DIR / env_file
    
    # print(f"Looking for env file: {env_file}")
    # print(f"Parent .env path: {parent_env_path}")
    # print(f"Backend .env path: {backend_env_path}")
    
    if parent_env_path.exists():
        environ.Env.read_env(parent_env_path)
        # print(f"{env_file} loaded from parent directory (cPanel mode)")
    elif backend_env_path.exists():
        environ.Env.read_env(backend_env_path)
        # print(f"{env_file} loaded from backend directory (cPanel mode)")
    else:
        # Fallback to .env if specific env file not found
        fallback_parent = BASE_DIR.parent / '.env'
        fallback_backend = BASE_DIR / '.env'
        
        if fallback_parent.exists():
            environ.Env.read_env(fallback_parent)
            # print("Fallback: .env loaded from parent directory")
        elif fallback_backend.exists():
            environ.Env.read_env(fallback_backend)
            # print("Fallback: .env loaded from backend directory")
        else:
            pass
            # print("No .env file found - using defaults")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')
# print(f"Final DEBUG value: {DEBUG}")
# print(f"DEBUG type: {type(DEBUG)}")

# ALLOWED_HOSTS configuration
if DEBUG:
    ALLOWED_HOSTS = ['*']
else:
    # Production/Staging - sadece belirli host'lara izin ver
    allowed_hosts_str = env('ALLOWED_HOSTS', default='localhost,127.0.0.1')
    ALLOWED_HOSTS = [host.strip() for host in allowed_hosts_str.split(',')]
    
    # Domain varsa ekle
    domain = env('DOMAIN', default='')
    if domain and domain not in ALLOWED_HOSTS:
        ALLOWED_HOSTS.append(domain)

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    
    # Third party apps
    'rest_framework',
    'corsheaders',
    'django_celery_beat',
    'django_celery_results',
    
    # Local apps (add your apps here)
    
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

if env('DATABASE_URL'):
    # Use dj-database-url for flexible database configuration
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(env('DATABASE_URL'))
    }
else:
    # Fallback to SQLite for development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'tr-tr'
TIME_ZONE = 'Europe/Istanbul'
USE_I18N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'

# Static files directories (your app's static files)
STATICFILES_DIRS = []
if (BASE_DIR / 'static').exists():
    STATICFILES_DIRS.append(BASE_DIR / 'static')

# Static root - where collectstatic puts files
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# CORS Settings
CORS_ALLOW_ALL_ORIGINS = DEBUG  # Only in development
if not DEBUG:
    CORS_ALLOWED_ORIGINS = [
        f"https://{env('DOMAIN', default='yourdomain.com')}",
        f"https://www.{env('DOMAIN', default='yourdomain.com')}",
    ]

# Celery Configuration (only works in Docker, not cPanel)
if not os.path.exists('/home'):  # Not cPanel
    CELERY_BROKER_URL = env('REDIS_URL', default='redis://redis:6379/0')
    CELERY_RESULT_BACKEND = env('REDIS_URL', default='redis://redis:6379/0')
    CELERY_ACCEPT_CONTENT = ['json']
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_TIMEZONE = TIME_ZONE

# Cache Configuration
if not os.path.exists('/home'):  # Docker
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': env('REDIS_URL', default='redis://redis:6379/1'),
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            }
        }
    }
else:  # cPanel - use database cache
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.db.DatabaseCache',
            'LOCATION': 'django_cache_table',
        }
    }

# Security settings for production
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_HSTS_SECONDS = 86400
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Only enable if using HTTPS
    # SECURE_SSL_REDIRECT = True
    # SESSION_COOKIE_SECURE = True
    # CSRF_COOKIE_SECURE = True

# Environment-specific settings
CURRENT_ENV = env('DJANGO_ENV', default='development')

if CURRENT_ENV == 'staging':
    # Staging specific settings
    print("Running in STAGING mode")
    pass
elif CURRENT_ENV == 'production':
    # Production specific settings  
    print("Running in PRODUCTION mode")
    pass
else:
    # Development specific settings
    print("Running in DEVELOPMENT mode")
    pass